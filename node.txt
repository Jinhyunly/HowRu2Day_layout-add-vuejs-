1. 의존 모듈 추가

body-parser   -> post 데이터 처리
express-session  -> 세션관리

express-session 모듈이 직접 쿠키에 접근하므로 cookie-parser를 더이상 사용할 필요가 없다.

추가적으로 node.js 에 내장되어있는 fs모듈이 있는데 이는 나중에 파일을 열기 위함이다.

router 코드를 아래로 내려주는데 bodyParser 설정 아래 부분에 있다면 제대로 작돌하지 않는다.

그리고  router에서 fs모듈을 사용할 수있도록 인자로 추가해준다.


session 부분

- secret : 쿠키를 임의로 변조하는 것을 방지하기 위한 sign 값이다. 원하는 값을 넣으면된다
- resave : 세션을 언제나 저장할지(변경하지 않아도) 젖아하는 값입니다.
	   express-session documentation에서는 이값을 false 로 하는 것을 권장하고 필요에 따라 true로 설정
- saveUninitialized : uninitialized 세션이란 새로 생겼지만 변경되지 않은 세션을 의미한다.
		      Documentation 에서 이값을 true로 설정하는 것을 권장한다.


ejs 에서는 두가지만 알면된다
1. <% 자바스크립트 코드%>
2. <%= 출력할 자바스크립트 객체%>   -> 자바스크립트 객체를 router에서 받아올수있다.


ejs 분할하기

php나 rails에서 처럼, ejs에서도 코드를 여러파일로 분리하고 불러와서 사용할수있다.

<% include FILENAME %>



RESTful API

REST는 Representational State Transfer 의 약자로서, 월드와이드 웹(www)와 같은
하이퍼미디어 시스템을 위한 소프트웨어 아키텍쳐 중 하나의 형식이다. REST서버는 클라이언트로 하여금 HTTP 프로토콜을
사용해 서버의 정보에 접근 및 변경을 가능케 합니다. 여기서 정보는 text, xml, json등 형식을 제공되는데 트렌드는  json이다


HTTP 메소드
REST 기반 아키텍쳐에서 자주 사용되는 4가지 메소드는 다음과 같다

1. GET - 조회
2. PUT - 생성 및 업데이트
3. DELETE - 제거
4. POST - 생성

POST와 PUT이 헷갈린다면 아래 링크 참조
https://1ambda.github.io/javascripts/rest-api-put-vs-post/


API:GET/list

모든 유저 리스트를 출력하는 GET API를 작성한다.
우선, user.json 파일을 읽어야 하므로 , fs 모듈을 사용한다.


API:GET/getUser/:username

특정 유저 username의 디테일한 정보를 가져오는 GET API를 작성한다.


API:POST/addUser/:username
POST 메소드를 사용한다.


API:PUT/updateUser/:username
body:{"password":"___", "name": "___"}
사용자 정보를 업데이트하는 API 이고, PUT 메소드를 사용
PUT API 는 indempotent해야 한다, 쉽게 말해서 요청을 몇번 수행하더라도, 같은 결과를 보장해야한다.


API:DELETE/deleteUser/:username
유저를 데이터에서 삭제하는 API이다. DELETE 메소드 사용



